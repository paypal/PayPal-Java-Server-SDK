/*
 * PaypalServerSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.api.UnitTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;

import com.paypal.sdk.PaypalServerSDKClient;
import com.paypal.sdk.controllers.OrdersController;
import com.paypal.sdk.exceptions.ApiException;
import com.paypal.sdk.exceptions.ErrorException;
import com.paypal.sdk.models.CheckoutPaymentIntent;
import com.paypal.sdk.models.ConfirmOrderRequest;
import com.paypal.sdk.models.OrderRequest;
import com.paypal.sdk.models.OrderTrackerRequest;
import com.paypal.sdk.models.OrdersAuthorizeInput;
import com.paypal.sdk.models.OrdersConfirmInput;
import com.paypal.sdk.models.OrdersCreateInput;
import com.paypal.sdk.models.OrdersGetInput;
import com.paypal.sdk.models.OrdersPatchInput;
import com.paypal.sdk.models.OrdersTrackCreateInput;
import com.paypal.sdk.models.OrdersTrackersPatchInput;
import com.paypal.sdk.models.Patch;
import com.paypal.sdk.models.PatchOp;
import com.paypal.sdk.models.PaymentSource;
import com.paypal.sdk.models.ProcessingInstruction;
import com.paypal.sdk.utilities.JsonValue;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class OrdersControllerTest extends BaseControllerTest {

  /**
   * Client instance.
   */
  private static PaypalServerSDKClient client;

  /**
   * Controller instance (for all tests).
   */
  private static OrdersController controller;

  /**
   * Non existent order id to test 404 status code.
   */
  private static String nonExistentOrderId = "id0";
  /**
   * Non existent order id to test 404 status code.
   */
  private static String invalidOrderId = "'id0";

  /**
   * Invalid id to test 400 status code.
   */
  private static String nonExistentTrackerId = "tracker_id0";

  /**
   * Setup test class.
   */
  @BeforeClass
  public static void setUpClass() {
    client = createConfiguration();
    controller = client.getOrdersController();
  }

  /**
   * Tear down test class.
   */
  @AfterClass
  public static void tearDownClass() {
    controller = null;
  }

  // Test Create Order 400 Response
  @Test
  public void TestCreateOrderFor400StatusCode() throws Exception {
    // Create Request
    OrdersCreateInput ordersCreateInput = new OrdersCreateInput.Builder(
        null,
        new OrderRequest.Builder(
            CheckoutPaymentIntent.CAPTURE,
            Arrays.asList(

            ))
            .build())
        .payPalRequestId("")
        .payPalPartnerAttributionId("PayPal-Partner-Attribution-Id")
        .payPalClientMetadataId("PayPal-Client-Metadata-Id")
        .prefer("return=minimal")
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersCreate(ordersCreateInput);
    });

    // Test response code
    assertEquals("Status is not 400",
        400, exception.getResponseCode());

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }

  // Returns 404 Response on Patch Order
  @Test
  public void TestPatchOrderFor404StatusCode() throws Exception {
    // Create Request
    OrdersPatchInput ordersPatchInput = new OrdersPatchInput.Builder(
        invalidOrderId,
        null)
        .body(Arrays.asList(
            new Patch.Builder(
                PatchOp.ADD)
                .build()))
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersPatch(ordersPatchInput);
    });

    // Test response code
    assertEquals("Status is not 404",
        404, exception.getResponseCode());

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }

  // Returns 404 Response on Confirm Order
  @Test
  public void TestConfirmOrderFor404StatusCode() throws Exception {
    // Create Request
    OrdersConfirmInput ordersConfirmInput = new OrdersConfirmInput.Builder(
        nonExistentOrderId,
        null)
        .prefer("return=minimal")
        .body(new ConfirmOrderRequest.Builder(
            new PaymentSource.Builder()
                .build())
            .processingInstruction(ProcessingInstruction.NO_INSTRUCTION)
            .build())
        .build();

    // Call the Api and catch the exception
    ApiException exception = assertThrows(ApiException.class, () -> {
      controller.ordersConfirm(ordersConfirmInput);
    });

    // Test response code
    assertEquals("Status is not 404",
        404, exception.getResponseCode());

    // Test response body
    assertNotNull("Message is not null", exception.getMessage());

  }

  // Returns 404 Response on Authorize Order
  @Test
  public void TestAuthorizeOrderFor404StatusCode() throws Exception {
    // Create Request
    OrdersAuthorizeInput ordersAuthorizeInput = new OrdersAuthorizeInput.Builder(
        nonExistentOrderId,
        null)
        .prefer("return=minimal")
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersAuthorize(ordersAuthorizeInput);
    });

    // Test response code
    assertEquals("Status is not 404",
        404, exception.getResponseCode());

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }

  // Returns 400 Response on Create Order Track
  @Test
  public void TestCreateOrderTrackFor400StatusCode() throws Exception {
    // Create Request
    OrdersTrackCreateInput ordersTrackCreateInput = new OrdersTrackCreateInput.Builder(
        nonExistentOrderId,
        null,
        new OrderTrackerRequest.Builder(
            nonExistentTrackerId)
            .notifyPayer(false)
            .build())
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersTrackCreate(ordersTrackCreateInput);
    });

    // Test response code
    assertEquals("Status is not 400",
        400, exception.getResponseCode());

    // Test headers
    Map<String, String> headers = new LinkedHashMap<String, String>();
    headers.put("Content-Type", "application/json");

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }

  // Returns 404 Response on Patch Order Track
  @Test
  public void TestPatchOrderTrackFor404StatusCode() throws Exception {
    // Create Request
    OrdersTrackersPatchInput ordersTrackersPatchInput = new OrdersTrackersPatchInput.Builder(
        nonExistentOrderId,
        nonExistentTrackerId,
        null)
        .body(Arrays.asList(
            new Patch.Builder(
                PatchOp.REPLACE)
                .path("/notify_payer")
                .value(JsonValue.fromObject("true"))
                .build()))
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersTrackersPatch(ordersTrackersPatchInput);
    });

    // Test response code
    assertEquals("Status is not 404",
        404, exception.getResponseCode());

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }

  // Returns 404 Response on Get Order
  @Test
  public void TestGetOrderFor404StatusCode() throws Exception {
    // Create Request
    OrdersGetInput ordersGetInput = new OrdersGetInput.Builder(
        "id0")
        .build();

    // Call the Api and catch the exception
    ErrorException exception = assertThrows(ErrorException.class, () -> {
      controller.ordersGet(ordersGetInput);
    });

    // Test response code
    assertEquals("Status is not 404",
        404, exception.getResponseCode());

    // Test response body
    assertNotNull("Debug Id is not null", exception.getDebugId());
    assertNotNull("Details is not null", exception.getDetails());
    assertNotNull("Message is not null", exception.getMessage());
    assertNotNull("Name is not null", exception.getName());
    assertNotNull("Information Link is not null", exception.getLinks());

  }
}
