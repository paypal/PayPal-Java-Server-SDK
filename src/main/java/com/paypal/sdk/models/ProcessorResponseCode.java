/*
 * PaypalServerSdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sdk.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * ProcessorResponseCode to be used.
 */
public enum ProcessorResponseCode {
    ENUM_0000,

    ENUM_00N7,

    ENUM_0100,

    ENUM_0390,

    ENUM_0500,

    ENUM_0580,

    ENUM_0800,

    ENUM_0880,

    ENUM_0890,

    ENUM_0960,

    ENUM_0R00,

    ENUM_1000,

    ENUM_10BR,

    ENUM_1300,

    ENUM_1310,

    ENUM_1312,

    ENUM_1317,

    ENUM_1320,

    ENUM_1330,

    ENUM_1335,

    ENUM_1340,

    ENUM_1350,

    ENUM_1352,

    ENUM_1360,

    ENUM_1370,

    ENUM_1380,

    ENUM_1382,

    ENUM_1384,

    ENUM_1390,

    ENUM_1393,

    ENUM_5100,

    ENUM_5110,

    ENUM_5120,

    ENUM_5130,

    ENUM_5135,

    ENUM_5140,

    ENUM_5150,

    ENUM_5160,

    ENUM_5170,

    ENUM_5180,

    ENUM_5190,

    ENUM_5200,

    ENUM_5210,

    ENUM_5400,

    ENUM_5500,

    ENUM_5650,

    ENUM_5700,

    ENUM_5710,

    ENUM_5800,

    ENUM_5900,

    ENUM_5910,

    ENUM_5920,

    ENUM_5930,

    ENUM_5950,

    ENUM_6300,

    ENUM_7600,

    ENUM_7700,

    ENUM_7710,

    ENUM_7800,

    ENUM_7900,

    ENUM_8000,

    ENUM_8010,

    ENUM_8020,

    ENUM_8030,

    ENUM_8100,

    ENUM_8110,

    ENUM_8220,

    ENUM_9100,

    ENUM_9500,

    ENUM_9510,

    ENUM_9520,

    ENUM_9530,

    ENUM_9540,

    ENUM_9600,

    PCNR,

    PCVV,

    PP06,

    PPRN,

    PPAD,

    PPAB,

    PPAE,

    PPAG,

    PPAI,

    PPAR,

    PPAU,

    PPAV,

    PPAX,

    PPBG,

    PPC2,

    PPCE,

    PPCO,

    PPCR,

    PPCT,

    PPCU,

    PPD3,

    PPDC,

    PPDI,

    PPDV,

    PPDT,

    PPEF,

    PPEL,

    PPER,

    PPEX,

    PPFE,

    PPFI,

    PPFR,

    PPFV,

    PPGR,

    PPH1,

    PPIF,

    PPII,

    PPIM,

    PPIT,

    PPLR,

    PPLS,

    PPMB,

    PPMC,

    PPMD,

    PPNC,

    PPNL,

    PPNM,

    PPNT,

    PPPH,

    PPPI,

    PPPM,

    PPQC,

    PPRE,

    PPRF,

    PPRR,

    PPS0,

    PPS1,

    PPS2,

    PPS3,

    PPS4,

    PPS5,

    PPS6,

    PPSC,

    PPSD,

    PPSE,

    PPTE,

    PPTF,

    PPTI,

    PPTR,

    PPTT,

    PPTV,

    PPUA,

    PPUC,

    PPUE,

    PPUI,

    PPUP,

    PPUR,

    PPVC,

    PPVE,

    PPVT,

    /**
     * Unknown values will be mapped by this enum member
     */
    _UNKNOWN;


    private static TreeMap<String, ProcessorResponseCode> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_0000.value = "0000";
        ENUM_00N7.value = "00N7";
        ENUM_0100.value = "0100";
        ENUM_0390.value = "0390";
        ENUM_0500.value = "0500";
        ENUM_0580.value = "0580";
        ENUM_0800.value = "0800";
        ENUM_0880.value = "0880";
        ENUM_0890.value = "0890";
        ENUM_0960.value = "0960";
        ENUM_0R00.value = "0R00";
        ENUM_1000.value = "1000";
        ENUM_10BR.value = "10BR";
        ENUM_1300.value = "1300";
        ENUM_1310.value = "1310";
        ENUM_1312.value = "1312";
        ENUM_1317.value = "1317";
        ENUM_1320.value = "1320";
        ENUM_1330.value = "1330";
        ENUM_1335.value = "1335";
        ENUM_1340.value = "1340";
        ENUM_1350.value = "1350";
        ENUM_1352.value = "1352";
        ENUM_1360.value = "1360";
        ENUM_1370.value = "1370";
        ENUM_1380.value = "1380";
        ENUM_1382.value = "1382";
        ENUM_1384.value = "1384";
        ENUM_1390.value = "1390";
        ENUM_1393.value = "1393";
        ENUM_5100.value = "5100";
        ENUM_5110.value = "5110";
        ENUM_5120.value = "5120";
        ENUM_5130.value = "5130";
        ENUM_5135.value = "5135";
        ENUM_5140.value = "5140";
        ENUM_5150.value = "5150";
        ENUM_5160.value = "5160";
        ENUM_5170.value = "5170";
        ENUM_5180.value = "5180";
        ENUM_5190.value = "5190";
        ENUM_5200.value = "5200";
        ENUM_5210.value = "5210";
        ENUM_5400.value = "5400";
        ENUM_5500.value = "5500";
        ENUM_5650.value = "5650";
        ENUM_5700.value = "5700";
        ENUM_5710.value = "5710";
        ENUM_5800.value = "5800";
        ENUM_5900.value = "5900";
        ENUM_5910.value = "5910";
        ENUM_5920.value = "5920";
        ENUM_5930.value = "5930";
        ENUM_5950.value = "5950";
        ENUM_6300.value = "6300";
        ENUM_7600.value = "7600";
        ENUM_7700.value = "7700";
        ENUM_7710.value = "7710";
        ENUM_7800.value = "7800";
        ENUM_7900.value = "7900";
        ENUM_8000.value = "8000";
        ENUM_8010.value = "8010";
        ENUM_8020.value = "8020";
        ENUM_8030.value = "8030";
        ENUM_8100.value = "8100";
        ENUM_8110.value = "8110";
        ENUM_8220.value = "8220";
        ENUM_9100.value = "9100";
        ENUM_9500.value = "9500";
        ENUM_9510.value = "9510";
        ENUM_9520.value = "9520";
        ENUM_9530.value = "9530";
        ENUM_9540.value = "9540";
        ENUM_9600.value = "9600";
        PCNR.value = "PCNR";
        PCVV.value = "PCVV";
        PP06.value = "PP06";
        PPRN.value = "PPRN";
        PPAD.value = "PPAD";
        PPAB.value = "PPAB";
        PPAE.value = "PPAE";
        PPAG.value = "PPAG";
        PPAI.value = "PPAI";
        PPAR.value = "PPAR";
        PPAU.value = "PPAU";
        PPAV.value = "PPAV";
        PPAX.value = "PPAX";
        PPBG.value = "PPBG";
        PPC2.value = "PPC2";
        PPCE.value = "PPCE";
        PPCO.value = "PPCO";
        PPCR.value = "PPCR";
        PPCT.value = "PPCT";
        PPCU.value = "PPCU";
        PPD3.value = "PPD3";
        PPDC.value = "PPDC";
        PPDI.value = "PPDI";
        PPDV.value = "PPDV";
        PPDT.value = "PPDT";
        PPEF.value = "PPEF";
        PPEL.value = "PPEL";
        PPER.value = "PPER";
        PPEX.value = "PPEX";
        PPFE.value = "PPFE";
        PPFI.value = "PPFI";
        PPFR.value = "PPFR";
        PPFV.value = "PPFV";
        PPGR.value = "PPGR";
        PPH1.value = "PPH1";
        PPIF.value = "PPIF";
        PPII.value = "PPII";
        PPIM.value = "PPIM";
        PPIT.value = "PPIT";
        PPLR.value = "PPLR";
        PPLS.value = "PPLS";
        PPMB.value = "PPMB";
        PPMC.value = "PPMC";
        PPMD.value = "PPMD";
        PPNC.value = "PPNC";
        PPNL.value = "PPNL";
        PPNM.value = "PPNM";
        PPNT.value = "PPNT";
        PPPH.value = "PPPH";
        PPPI.value = "PPPI";
        PPPM.value = "PPPM";
        PPQC.value = "PPQC";
        PPRE.value = "PPRE";
        PPRF.value = "PPRF";
        PPRR.value = "PPRR";
        PPS0.value = "PPS0";
        PPS1.value = "PPS1";
        PPS2.value = "PPS2";
        PPS3.value = "PPS3";
        PPS4.value = "PPS4";
        PPS5.value = "PPS5";
        PPS6.value = "PPS6";
        PPSC.value = "PPSC";
        PPSD.value = "PPSD";
        PPSE.value = "PPSE";
        PPTE.value = "PPTE";
        PPTF.value = "PPTF";
        PPTI.value = "PPTI";
        PPTR.value = "PPTR";
        PPTT.value = "PPTT";
        PPTV.value = "PPTV";
        PPUA.value = "PPUA";
        PPUC.value = "PPUC";
        PPUE.value = "PPUE";
        PPUI.value = "PPUI";
        PPUP.value = "PPUP";
        PPUR.value = "PPUR";
        PPVC.value = "PPVC";
        PPVE.value = "PPVE";
        PPVT.value = "PPVT";
        _UNKNOWN.value = null;

        valueMap.put("0000", ENUM_0000);
        valueMap.put("00N7", ENUM_00N7);
        valueMap.put("0100", ENUM_0100);
        valueMap.put("0390", ENUM_0390);
        valueMap.put("0500", ENUM_0500);
        valueMap.put("0580", ENUM_0580);
        valueMap.put("0800", ENUM_0800);
        valueMap.put("0880", ENUM_0880);
        valueMap.put("0890", ENUM_0890);
        valueMap.put("0960", ENUM_0960);
        valueMap.put("0R00", ENUM_0R00);
        valueMap.put("1000", ENUM_1000);
        valueMap.put("10BR", ENUM_10BR);
        valueMap.put("1300", ENUM_1300);
        valueMap.put("1310", ENUM_1310);
        valueMap.put("1312", ENUM_1312);
        valueMap.put("1317", ENUM_1317);
        valueMap.put("1320", ENUM_1320);
        valueMap.put("1330", ENUM_1330);
        valueMap.put("1335", ENUM_1335);
        valueMap.put("1340", ENUM_1340);
        valueMap.put("1350", ENUM_1350);
        valueMap.put("1352", ENUM_1352);
        valueMap.put("1360", ENUM_1360);
        valueMap.put("1370", ENUM_1370);
        valueMap.put("1380", ENUM_1380);
        valueMap.put("1382", ENUM_1382);
        valueMap.put("1384", ENUM_1384);
        valueMap.put("1390", ENUM_1390);
        valueMap.put("1393", ENUM_1393);
        valueMap.put("5100", ENUM_5100);
        valueMap.put("5110", ENUM_5110);
        valueMap.put("5120", ENUM_5120);
        valueMap.put("5130", ENUM_5130);
        valueMap.put("5135", ENUM_5135);
        valueMap.put("5140", ENUM_5140);
        valueMap.put("5150", ENUM_5150);
        valueMap.put("5160", ENUM_5160);
        valueMap.put("5170", ENUM_5170);
        valueMap.put("5180", ENUM_5180);
        valueMap.put("5190", ENUM_5190);
        valueMap.put("5200", ENUM_5200);
        valueMap.put("5210", ENUM_5210);
        valueMap.put("5400", ENUM_5400);
        valueMap.put("5500", ENUM_5500);
        valueMap.put("5650", ENUM_5650);
        valueMap.put("5700", ENUM_5700);
        valueMap.put("5710", ENUM_5710);
        valueMap.put("5800", ENUM_5800);
        valueMap.put("5900", ENUM_5900);
        valueMap.put("5910", ENUM_5910);
        valueMap.put("5920", ENUM_5920);
        valueMap.put("5930", ENUM_5930);
        valueMap.put("5950", ENUM_5950);
        valueMap.put("6300", ENUM_6300);
        valueMap.put("7600", ENUM_7600);
        valueMap.put("7700", ENUM_7700);
        valueMap.put("7710", ENUM_7710);
        valueMap.put("7800", ENUM_7800);
        valueMap.put("7900", ENUM_7900);
        valueMap.put("8000", ENUM_8000);
        valueMap.put("8010", ENUM_8010);
        valueMap.put("8020", ENUM_8020);
        valueMap.put("8030", ENUM_8030);
        valueMap.put("8100", ENUM_8100);
        valueMap.put("8110", ENUM_8110);
        valueMap.put("8220", ENUM_8220);
        valueMap.put("9100", ENUM_9100);
        valueMap.put("9500", ENUM_9500);
        valueMap.put("9510", ENUM_9510);
        valueMap.put("9520", ENUM_9520);
        valueMap.put("9530", ENUM_9530);
        valueMap.put("9540", ENUM_9540);
        valueMap.put("9600", ENUM_9600);
        valueMap.put("PCNR", PCNR);
        valueMap.put("PCVV", PCVV);
        valueMap.put("PP06", PP06);
        valueMap.put("PPRN", PPRN);
        valueMap.put("PPAD", PPAD);
        valueMap.put("PPAB", PPAB);
        valueMap.put("PPAE", PPAE);
        valueMap.put("PPAG", PPAG);
        valueMap.put("PPAI", PPAI);
        valueMap.put("PPAR", PPAR);
        valueMap.put("PPAU", PPAU);
        valueMap.put("PPAV", PPAV);
        valueMap.put("PPAX", PPAX);
        valueMap.put("PPBG", PPBG);
        valueMap.put("PPC2", PPC2);
        valueMap.put("PPCE", PPCE);
        valueMap.put("PPCO", PPCO);
        valueMap.put("PPCR", PPCR);
        valueMap.put("PPCT", PPCT);
        valueMap.put("PPCU", PPCU);
        valueMap.put("PPD3", PPD3);
        valueMap.put("PPDC", PPDC);
        valueMap.put("PPDI", PPDI);
        valueMap.put("PPDV", PPDV);
        valueMap.put("PPDT", PPDT);
        valueMap.put("PPEF", PPEF);
        valueMap.put("PPEL", PPEL);
        valueMap.put("PPER", PPER);
        valueMap.put("PPEX", PPEX);
        valueMap.put("PPFE", PPFE);
        valueMap.put("PPFI", PPFI);
        valueMap.put("PPFR", PPFR);
        valueMap.put("PPFV", PPFV);
        valueMap.put("PPGR", PPGR);
        valueMap.put("PPH1", PPH1);
        valueMap.put("PPIF", PPIF);
        valueMap.put("PPII", PPII);
        valueMap.put("PPIM", PPIM);
        valueMap.put("PPIT", PPIT);
        valueMap.put("PPLR", PPLR);
        valueMap.put("PPLS", PPLS);
        valueMap.put("PPMB", PPMB);
        valueMap.put("PPMC", PPMC);
        valueMap.put("PPMD", PPMD);
        valueMap.put("PPNC", PPNC);
        valueMap.put("PPNL", PPNL);
        valueMap.put("PPNM", PPNM);
        valueMap.put("PPNT", PPNT);
        valueMap.put("PPPH", PPPH);
        valueMap.put("PPPI", PPPI);
        valueMap.put("PPPM", PPPM);
        valueMap.put("PPQC", PPQC);
        valueMap.put("PPRE", PPRE);
        valueMap.put("PPRF", PPRF);
        valueMap.put("PPRR", PPRR);
        valueMap.put("PPS0", PPS0);
        valueMap.put("PPS1", PPS1);
        valueMap.put("PPS2", PPS2);
        valueMap.put("PPS3", PPS3);
        valueMap.put("PPS4", PPS4);
        valueMap.put("PPS5", PPS5);
        valueMap.put("PPS6", PPS6);
        valueMap.put("PPSC", PPSC);
        valueMap.put("PPSD", PPSD);
        valueMap.put("PPSE", PPSE);
        valueMap.put("PPTE", PPTE);
        valueMap.put("PPTF", PPTF);
        valueMap.put("PPTI", PPTI);
        valueMap.put("PPTR", PPTR);
        valueMap.put("PPTT", PPTT);
        valueMap.put("PPTV", PPTV);
        valueMap.put("PPUA", PPUA);
        valueMap.put("PPUC", PPUC);
        valueMap.put("PPUE", PPUE);
        valueMap.put("PPUI", PPUI);
        valueMap.put("PPUP", PPUP);
        valueMap.put("PPUR", PPUR);
        valueMap.put("PPVC", PPVC);
        valueMap.put("PPVE", PPVE);
        valueMap.put("PPVT", PPVT);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static ProcessorResponseCode constructFromString(String toConvert) throws IOException {
        ProcessorResponseCode enumValue = fromString(toConvert);
        if (enumValue == null) {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static ProcessorResponseCode fromString(String toConvert) {
        if (!valueMap.containsKey(toConvert)) {
            return _UNKNOWN;
        }
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        if (value == null) {
            return null;
        }
        return value.toString();
    }

    /**
     * Convert list of ProcessorResponseCode values to list of string values.
     * @param toConvert The list of ProcessorResponseCode values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<ProcessorResponseCode> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (ProcessorResponseCode enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 